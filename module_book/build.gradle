plugins {
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kapt)
}
if (isModule.toBoolean()) {
    apply plugin: "com.android.application"
    apply plugin: "therouter"
} else {
    apply plugin: "com.android.library"
}
apply plugin: "com.google.devtools.ksp"
android {
    namespace = "com.ebook.book"
    compileSdk = 35
    defaultConfig {
        if (isModule.toBoolean()) {
            applicationId = "com.ebook.book"
        }
        minSdk = 26
        targetSdk = 35
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        named("debug") {
            minifyEnabled = false
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
        }
        named("release") {
            minifyEnabled = false
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
        compose = true
        buildConfig = true
    }

    sourceSets {
        named("main") {
            jniLibs.srcDir("src/main/jniLibs")
            if (isModule.toBoolean()) {
                manifest.srcFile("src/main/module/AndroidManifest.xml")
            } else {
                manifest.srcFile("src/main/AndroidManifest.xml")
                java {
                    exclude("debug/**")
                }
            }
        }
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.10"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation(fileTree("libs") { include("*.jar") })
    api(project(":lib_book_common"))
    implementation(project(":lib_book"))
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    ksp(libs.apt)
    implementation(libs.router)

    // Dagger
    ksp(libs.dagger.compiler)
    ksp(libs.glide.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.androidx.test.espresso.core)
}
